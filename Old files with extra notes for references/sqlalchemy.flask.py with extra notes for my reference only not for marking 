import numpy as np
import datetime as dt

import sqlalchemy #wrapping SQL in a python library - talk to SQL in python - helpe protect APP from malicious injections  - (inspect allows reverse engineering) 
#inspector reads tables and reads it back to you with SQL Alchemy - reflect  creates read and mai
#SQL db, SQLAlchemy uses python script to manipulate the data and flask takes the python object and converts to json (java script object notation)  so it can be surfaced up to the front end 
from sqlalchemy.orm import Session
#.means we are going into  sqlalchemy name of library orm module - object called session 
from sqlalchemy import create_engine, func

from flask import Flask, jsonify

#################################################
# Database Setup
#################################################
engine = create_engine("sqlite:///Resources/hawaii.sqlite")
# reflect an existing database into a new model
Base = automap_base()
# reflect the tables
Base.prepare(engine, reflect=True)  # base is a function - accessing a method within tht functoon - method is a function that belongs to the object 
# Save reference to the table
Measurement = Base.classes.measurement
Station = Base.classes.station
session = Session(engine)
#################################################
# Flask Setup
#################################################
app = Flask(__name__)
#################################################
# Flask Routes
#################################################
@app.route("/")
def welcome():
    """List all available api routes."""
    return (
        f"Welcome to the Climate App Home Page!<br>"
        f"Available Routes:<br/>"
        f"Precipitation measurement over the last 12 months: /api/v1.0/precipitation<br/>"
        f"List of Stations and their allocated numbers : /api/v1.0/stations<br/>"
        f"Temperature observations at the most active station over the previous 12 months: /api/v1.0/tobs<br/>"
        f"Enter a 'Start Date' to see the minimum, maximum, and average temperatures after the specified date: from the start date(yyyy-mm-dd): /api/v1.0/yyyy-mm-dd<br/>"
        f"Enter both a start and end date (yyyy-mm-dd) to retrieve the minimum, maximum, and average temperatures for that date range: /api/v1.0/yyyy-mm-dd/yyyy-mm-dd"
    )

# create precipitation route of last 12 months of precipitation data
@app.route("/api/v1.0/precipitation")
def precip():
    recent_prcp = session.query(Measurement.date, Measurement.prcp)\
    .filter(Measurement.date > '2016-08-22')\
    .filter(Measurement.date <= '2017-08-23')\
    .order_by(Measurement.date).all()

    # convert results to a dictionary with date as key and prcp as value
    prcp_dict = dict(recent_prcp)

    # return json list of dictionary
    return jsonify(prcp_dict)


# create station route of a list of the station names and numbers in the dataset
@app.route("/api/v1.0/stations")
def stations():

    stations = session.query(Station.name, Station.station).all()

    # convert results to a dict
    stations_dict = dict(stations)

    # return json list of dict (I decided to do a dict instead of a list here to show both the station name and the station number)
    return jsonify(stations_dict)


    # create tobs route of temp observations for most active station over last 12 months
@app.route("/api/v1.0/tobs")
def tobs():

    tobs_station = session.query(str(Measurement.date), Measurement.tobs)\
    .filter(Measurement.date > '2016-08-23')\
    .filter(Measurement.date <= '2017-08-23')\
    .filter(Measurement.station == "USC00519281")\
    .order_by(Measurement.date).all()

    # convert results to dict (the a dict provide visibility of temperature by date )
    tobs_dict = dict(tobs_station)

    # return json list of dict
    return jsonify(tobs_dict)


# create start and start/end route
# min, average, and max temps for a given date range
@app.route("/api/v1.0/<start>")
@app.route("/api/v1.0/<start>/<end>")
def start_date(start, end=None):

    q = session.query(str(func.min(Measurement.tobs)), str(func.max(Measurement.tobs)), str(func.round(func.avg(Measurement.tobs))))

    if start:
        q = q.filter(Measurement.date >= start)

    if end:
        q = q.filter(Measurement.date <= end)

    # convert results into a dictionary (I opted for a dictionary instead of a list here so that it was clear with labels which temp was the min, the max, and the average)

    results = q.all()[0]

    keys = ["Min Temp", "Max Temp", "Avg Temp"]

    temp_dict = {keys[i]: results[i] for i in range(len(keys))}

    return jsonify(temp_dict)


if __name__ == "__main__":
    app.run(debug=True)

